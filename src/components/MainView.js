import React, { useState, useEffect, useCallback } from 'react';
import GroupWidget from './GroupWidget';
import CarouselWidget from './CarouselWidget';
import './MainView.css';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –≤–∏–¥–∂–µ—Ç–∞–º–∏
 * @param {Object} props - –°–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @param {Object} props.mainsData - –î–∞–Ω–Ω—ã–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –≤–∏–¥–∂–µ—Ç–∞–º–∏
 * @param {Function} props.onAddToCart - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
 * @param {Function} props.onCategoryClick - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {Function} props.onLoadProducts - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {boolean} props.loading - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
 * @param {string} props.error - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @param {Object} props.selectedStore - –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–ª–∞–¥
 * @param {boolean} props.useRealApi - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π API
 * @returns {JSX.Element} - JSX —ç–ª–µ–º–µ–Ω—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
const MainView = ({ 
  mainsData, 
  onAddToCart, 
  onCategoryClick, 
  onLoadProducts,
  loading = false, 
  error = null, 
  selectedStore, 
  useRealApi = false,
  onRetry = null,
  retryCount = 0
}) => {
  const [carouselProducts, setCarouselProducts] = useState({});
  const [carouselLoading, setCarouselLoading] = useState({});

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏
  const loadCarouselProducts = useCallback(async (categoryId) => {
    if (!useRealApi || !onLoadProducts || carouselProducts[categoryId]) {
      return;
    }

    try {
      console.log('üé† [MainView] –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoryId);
      setCarouselLoading(prev => ({ ...prev, [categoryId]: true }));
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ª–∏–º–∏—Ç–æ–º 5 (–º–∞–∫—Å–∏–º—É–º –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏)
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π page_token –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const result = await onLoadProducts(categoryId, '', 5);
      
      setCarouselProducts(prev => ({ 
        ...prev, 
        [categoryId]: result?.products || [] 
      }));
      
      console.log('‚úÖ [MainView] –ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', result?.products?.length || 0);
    } catch (error) {
      console.error('‚ùå [MainView] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏:', error);
      setCarouselProducts(prev => ({ 
        ...prev, 
        [categoryId]: [] 
      }));
    } finally {
      setCarouselLoading(prev => ({ ...prev, [categoryId]: false }));
    }
  }, [useRealApi, onLoadProducts, carouselProducts]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ä—É—Å–µ–ª–µ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (mainsData && mainsData.widgets && Array.isArray(mainsData.widgets)) {
      mainsData.widgets.forEach(widget => {
        if (widget.type === 'carousel' && widget.category_id) {
          loadCarouselProducts(widget.category_id);
        }
      });
    }
  }, [mainsData, loadCarouselProducts]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const handleCategoryClick = useCallback((category) => {
    console.log('üìÇ [MainView] –ö–ª–∏–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', category);
    if (onCategoryClick) {
      onCategoryClick(category);
    }
  }, [onCategoryClick]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
  const handleAddToCart = useCallback((product) => {
    console.log('üõí [MainView] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É:', product);
    if (onAddToCart) {
      onAddToCart(product);
    }
  }, [onAddToCart]);

  if (loading) {
    return (
      <div className="main-view main-view--loading">
        <div className="main-view__spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="main-view main-view--error">
        <div className="main-view__error-icon">‚ö†Ô∏è</div>
        <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
        <p>{error}</p>
        {retryCount > 0 && (
          <p className="main-view__retry-info">
            –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {retryCount}
          </p>
        )}
        {onRetry && (
          <button 
            className="main-view__retry-button"
            onClick={onRetry}
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        )}
      </div>
    );
  }

  if (!mainsData || !mainsData.widgets || !Array.isArray(mainsData.widgets)) {
    return (
      <div className="main-view main-view--empty">
        <div className="main-view__empty-icon">üì≠</div>
        <h3>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</h3>
        <p>–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã</p>
        {!loading && onRetry && (
          <button 
            className="main-view__retry-button"
            onClick={onRetry}
          >
            –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
          </button>
        )}
      </div>
    );
  }

  console.log('üè† [MainView] –†–µ–Ω–¥–µ—Ä–∏–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å', mainsData.widgets.length, '–≤–∏–¥–∂–µ—Ç–∞–º–∏');

  return (
    <div className="main-view">
      {/* ID hidden as requested */}
      {/* {mainsData.id && (
        <div className="main-view__header">
          <p className="main-view__id">ID: {mainsData.id}</p>
        </div>
      )} */}
      
      <div className="main-view__widgets">
        {mainsData.widgets.map((widget, index) => {
          if (widget.type === 'group') {
            return (
              <GroupWidget
                key={widget.id || `group-${index}`}
                widget={widget}
                onCategoryClick={handleCategoryClick}
              />
            );
          } else if (widget.type === 'carousel') {
            const products = carouselProducts[widget.category_id] || [];
            const isLoading = carouselLoading[widget.category_id] || false;
            
            return (
              <CarouselWidget
                key={widget.category_id || `carousel-${index}`}
                widget={widget}
                products={products}
                onAddToCart={handleAddToCart}
                onCategoryClick={handleCategoryClick}
                loading={isLoading}
              />
            );
          } else {
            console.warn('‚ö†Ô∏è [MainView] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–∏–¥–∂–µ—Ç–∞:', widget.type);
            return null;
          }
        })}
      </div>
    </div>
  );
};

export default MainView;
