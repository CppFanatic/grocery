import React, { useState, useEffect, useRef, useCallback } from 'react';
import ProductCard from './ProductCard';
import './CategoryView.css';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –µ—ë –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
 * @param {Object} props - –°–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @param {Object} props.category - –î–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {Function} props.onAddToCart - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
 * @param {Function} props.onBack - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * @param {Function} props.onLoadProducts - –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {boolean} props.loading - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
 * @param {string} props.error - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @param {string} props.locale - –õ–æ–∫–∞–ª—å –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
 * @returns {JSX.Element} - JSX —ç–ª–µ–º–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
const CategoryView = ({ 
  category, 
  onAddToCart, 
  onBack, 
  onLoadProducts, 
  loading = false, 
  error = null,
  locale = 'en'
}) => {
  const [products, setProducts] = useState([]);
  const [pageToken, setPageToken] = useState(null);
  const [hasMore, setHasMore] = useState(true);
  const [loadingMore, setLoadingMore] = useState(false);
  const [initialLoad, setInitialLoad] = useState(false);
  
  const observerRef = useRef();
  const loadingRef = useRef();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (category && !initialLoad) {
      console.log('üì¶ [CategoryView] –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', category.id);
      loadProducts();
      setInitialLoad(true);
    }
  }, [category, initialLoad]);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  const loadProducts = useCallback(async (nextPageToken = null) => {
    if (!category || loadingMore) return;
    
    setLoadingMore(true);
    try {
      const response = await onLoadProducts(category.id, nextPageToken);
      if (response && response.products) {
        if (nextPageToken) {
          // –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø—Ä–æ–¥—É–∫—Ç–∞–º
          setProducts(prev => [...prev, ...response.products]);
        } else {
          // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã (–ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
          setProducts(response.products);
        }
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ next_page_token —è–≤–ª—è–µ—Ç—Å—è integer
        const nextPageTokenInt = response.next_page_token ? parseInt(response.next_page_token, 10) : null;
        console.log('üîÑ [CategoryView] next_page_token conversion:', {
          original: response.next_page_token,
          type: typeof response.next_page_token,
          converted: nextPageTokenInt,
          convertedType: typeof nextPageTokenInt
        });
        setPageToken(nextPageTokenInt);
        setHasMore(!!response.next_page_token);
      }
    } catch (err) {
      console.error('‚ùå [CategoryView] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', err);
    } finally {
      setLoadingMore(false);
    }
  }, [category, onLoadProducts, loadingMore]);

  // Intersection Observer –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  useEffect(() => {
    if (!hasMore || loadingMore) return;

    const observer = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting && hasMore && !loadingMore) {
          console.log('üîÑ [CategoryView] –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤');
          loadProducts(pageToken);
        }
      },
      { threshold: 0.1 }
    );

    if (loadingRef.current) {
      observer.observe(loadingRef.current);
    }

    return () => {
      if (loadingRef.current) {
        observer.unobserve(loadingRef.current);
      }
    };
  }, [hasMore, loadingMore, pageToken, loadProducts]);

  if (!category) {
    return (
      <div className="category-view">
        <div className="category-view__error">
          <p>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>
          <button onClick={onBack} className="back-button">
            ‚Üê –ù–∞–∑–∞–¥
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="category-view">
      <div className="category-view__header">
        <button onClick={onBack} className="back-button">
          ‚Üê –ù–∞–∑–∞–¥
        </button>
        <div className="category-view__title">
          <h1>{category.title}</h1>
          {category.description && (
            <p className="category-view__description">{category.description}</p>
          )}
        </div>
      </div>

      {error && (
        <div className="category-view__error">
          <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {error}</p>
          <button onClick={() => loadProducts()} className="retry-button">
            –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
          </button>
        </div>
      )}

      {loading && products.length === 0 ? (
        <div className="category-view__loading">
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...</p>
        </div>
      ) : (
        <div className="category-view__content">
          {products.length > 0 ? (
            <>
              <div className="products-grid">
                {products.map((product) => (
                  <ProductCard
                    key={product.id}
                    product={product}
                    onAddToCart={onAddToCart}
                  />
                ))}
              </div>
              
              {/* –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ */}
              {hasMore && (
                <div ref={loadingRef} className="loading-trigger">
                  {loadingMore && <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤...</p>}
                </div>
              )}
              
              {!hasMore && products.length > 0 && (
                <div className="no-more-products">
                  <p>–í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã</p>
                </div>
              )}
            </>
          ) : (
            <div className="no-products">
              <p>–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤</p>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default CategoryView;
