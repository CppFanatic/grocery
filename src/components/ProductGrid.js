import React, { useState } from 'react';
import ProductCard from './ProductCard';
import CategoryCard from './CategoryCard';
import './ProductGrid.css';

function ProductGrid({ categories, products, onAddToCart, loading, error, selectedStore, useRealApi, onLoadProducts }) {
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [showCategories, setShowCategories] = useState(true);

  const handleCategorySelect = (category) => {
    console.log('üìÇ [ProductGrid] –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', category.name, 'ID:', category.id);
    setSelectedCategory(category);
    setShowCategories(false);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API
    if (useRealApi && onLoadProducts) {
      console.log('üì¶ [ProductGrid] –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', category.id);
      onLoadProducts(category.id);
    }
  };

  const handleBackToCategories = () => {
    setSelectedCategory(null);
    setShowCategories(true);
  };

  const filteredProducts = selectedCategory 
    ? products.filter(product => product.categoryId === selectedCategory.id)
    : products;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —Å–∫–ª–∞–¥ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
  if (useRealApi && !selectedStore) {
    return (
      <div className="product-grid">
        <div className="store-required-state">
          <div className="store-required-icon">üè™</div>
          <h3>–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∫—É–ø–æ–∫</h3>
          <p>–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏.</p>
          <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å —Å–∫–ª–∞–¥" –≤—ã—à–µ.</p>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="product-grid">
        <div className="loading-state">
          <div className="loading-spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="product-grid">
        <div className="error-state">
          <div className="error-icon">‚ö†Ô∏è</div>
          <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {error}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="product-grid">
      {showCategories ? (
        <>
          <div className="grid-header">
            <h2>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h2>
          </div>
          <div className="categories-grid">
            {categories.map(category => (
              <CategoryCard
                key={category.id}
                category={category}
                onClick={() => handleCategorySelect(category)}
              />
            ))}
          </div>
        </>
      ) : (
        <>
          <div className="grid-header">
            <button className="back-button" onClick={handleBackToCategories}>
              ‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            </button>
            <h2>{selectedCategory.name}</h2>
          </div>
          <div className="products-grid">
            {loading && filteredProducts.length === 0 ? (
              <div className="loading-state">
                <div className="loading-spinner"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...</p>
              </div>
            ) : filteredProducts.length === 0 ? (
              <div className="empty-state">
                <p>–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
              </div>
            ) : (
              filteredProducts.map(product => (
                <ProductCard
                  key={product.id}
                  product={product}
                  onAddToCart={onAddToCart}
                />
              ))
            )}
          </div>
        </>
      )}
    </div>
  );
}

export default ProductGrid;
