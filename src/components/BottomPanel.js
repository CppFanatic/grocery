import React, { useState, useEffect } from 'react';
import './BottomPanel.css';

function BottomPanel({
  cart,
  orderStatus,
  isLoggedIn,
  onLogin,
  onUpdateQuantity,
  onRemoveFromCart,
  totalItems,
  totalPrice,
  apiUrl,
  onApiUrlChange,
  authToken,
  onAuthTokenChange,
  onCheckout,
  useRealApi,
  onToggleApi,
  locale,
  onLocaleChange,
  useGridView,
  onToggleGridView
}) {
  const [showCart, setShowCart] = useState(false);
  const [showSettings, setShowSettings] = useState(false);

  const getOrderStatusIcon = () => {
    switch (orderStatus) {
      case '–ì–æ—Ç–æ–≤–∏—Ç—Å—è':
        return 'üë®‚Äçüç≥';
      case '–í –ø—É—Ç–∏':
        return 'üöó';
      case '–î–æ—Å—Ç–∞–≤–ª–µ–Ω':
        return '‚úÖ';
      default:
        return 'üì¶';
    }
  };

  return (
    <>
      <div className="bottom-panel">
        <div className="panel-item" onClick={() => setShowCart(true)}>
          <div className="icon">üõí</div>
          <span className="label">–ö–æ—Ä–∑–∏–Ω–∞</span>
          {totalItems > 0 && <span className="badge">{totalItems}</span>}
        </div>
        
        <div className="panel-item order-status">
          <div className="icon">{getOrderStatusIcon()}</div>
          <span className="label">{orderStatus}</span>
        </div>
        
        <div className="panel-item" onClick={onLogin}>
          <div className="icon">{isLoggedIn ? 'üë§' : 'üîê'}</div>
          <span className="label">{isLoggedIn ? '–ü—Ä–æ—Ñ–∏–ª—å' : '–í–æ–π—Ç–∏'}</span>
        </div>
        
        <div className="panel-item" onClick={() => setShowSettings(true)}>
          <div className="icon">‚öôÔ∏è</div>
          <span className="label">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>
        </div>
      </div>

      {showCart && (
        <div className="cart-modal">
          <div className="cart-content">
            <div className="cart-header">
              <h2>–ö–æ—Ä–∑–∏–Ω–∞</h2>
              <button className="close-btn" onClick={() => setShowCart(false)}>√ó</button>
            </div>
            
            <div className="cart-items">
              {cart.length === 0 ? (
                <p className="empty-cart">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
              ) : (
                cart.map(item => (
                  <div key={item.id} className="cart-item">
                    <div className="item-info">
                      <h4>{item.name}</h4>
                      <p>{item.price} ‚ÇΩ</p>
                    </div>
                    <div className="item-controls">
                      <button onClick={() => onUpdateQuantity(item.id, item.quantity - 1)}>-</button>
                      <span>{item.quantity}</span>
                      <button onClick={() => onUpdateQuantity(item.id, item.quantity + 1)}>+</button>
                      <button className="remove-btn" onClick={() => onRemoveFromCart(item.id)}>üóëÔ∏è</button>
                    </div>
                  </div>
                ))
              )}
            </div>
            
            {cart.length > 0 && (
              <div className="cart-footer">
                <div className="total">
                  <strong>–ò—Ç–æ–≥–æ: {totalPrice} ‚ÇΩ</strong>
                </div>
                <button className="checkout-btn" onClick={onCheckout}>–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑</button>
              </div>
            )}
          </div>
        </div>
      )}

      {showSettings && (
        <div className="settings-modal">
          <div className="settings-content">
            <div className="settings-header">
              <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
              <button className="close-btn" onClick={() => setShowSettings(false)}>√ó</button>
            </div>
            
            <div className="settings-body">
              <div className="setting-item">
                <label className="checkbox-label">
                  <input
                    type="checkbox"
                    checked={useRealApi}
                    onChange={(e) => onToggleApi(e.target.checked)}
                    className="api-toggle-checkbox"
                  />
                  <span className="checkbox-text">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π API</span>
                </label>
                <p className="setting-description">
                  –í–∫–ª—é—á–∏—Ç–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º API –±–µ–∫–µ–Ω–¥–æ–º –≤–º–µ—Å—Ç–æ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                </p>
              </div>

              {useRealApi && (
                <div className="setting-item">
                  <label className="checkbox-label">
                    <input
                      type="checkbox"
                      checked={useGridView}
                      onChange={(e) => onToggleGridView(e.target.checked)}
                      className="api-toggle-checkbox"
                    />
                    <span className="checkbox-text">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Grid View</span>
                  </label>
                  <p className="setting-description">
                    –í–∫–ª—é—á–∏—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –≥—Ä–∏–¥–∞ (–≥—Ä—É–ø–ø—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
                  </p>
                </div>
              )}
              
              <div className="setting-item">
                <label htmlFor="apiUrl">URL API –±–µ–∫–µ–Ω–¥–∞:</label>
                <input
                  id="apiUrl"
                  type="url"
                  value={apiUrl}
                  onChange={(e) => onApiUrlChange(e.target.value)}
                  placeholder="http://localhost:3001"
                  className="api-url-input"
                  disabled={!useRealApi}
                />
                  <p className="setting-description">
                    –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å API —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏ –∑–∞–∫–∞–∑–∞—Ö
                  </p>
                  <div className="cors-warning">
                    <strong>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:</strong> –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º API –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –æ—à–∏–±–∫–∞ CORS. 
                    –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ CORS –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
                  </div>
              </div>
              
                <div className="setting-item">
                  <label htmlFor="authToken">–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:</label>
                  <input
                    id="authToken"
                    type="password"
                    value={authToken}
                    onChange={(e) => onAuthTokenChange(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
                    className="auth-token-input"
                    disabled={!useRealApi}
                  />
                  <p className="setting-description">
                    –¢–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization)
                  </p>
                </div>

              {useRealApi && useGridView && (
                <div className="setting-item">
                  <label htmlFor="locale">–õ–æ–∫–∞–ª—å:</label>
                  <select
                    id="locale"
                    value={locale}
                    onChange={(e) => onLocaleChange(e.target.value)}
                    className="locale-select"
                  >
                    <option value="en">English (en)</option>
                    <option value="ru">–†—É—Å—Å–∫–∏–π (ru)</option>
                    <option value="es">Espa√±ol (es)</option>
                    <option value="fr">Fran√ßais (fr)</option>
                    <option value="de">Deutsch (de)</option>
                  </select>
                  <p className="setting-description">
                    –Ø–∑—ã–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Grid API (—Ñ–æ—Ä–º–∞—Ç: –¥–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ —è–∑—ã–∫–∞)
                  </p>
                </div>
              )}

            </div>
            
            <div className="settings-footer">
                <button 
                  className="save-btn"
                  onClick={() => setShowSettings(false)}
                >
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}

export default BottomPanel;
