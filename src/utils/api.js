// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ API —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
 * @param {string} endpoint - Endpoint API (–Ω–∞–ø—Ä–∏–º–µ—Ä, '/categories' –∏–ª–∏ '/products')
 * @param {string} baseUrl - –ë–∞–∑–æ–≤—ã–π URL API
 * @param {string} authToken - –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è fetch
 * @returns {Promise} - Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞
 */
export const apiRequest = async (endpoint, baseUrl, authToken, options = {}) => {
  const url = `${baseUrl.replace(/\/$/, '')}${endpoint.startsWith('/') ? endpoint : `/${endpoint}`}`;
  
  const headers = {
    'Content-Type': 'application/json',
    ...options.headers
  };

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
  if (authToken && authToken.trim()) {
    headers['Authorization'] = `Bearer ${authToken.trim()}`;
  }

  const config = {
    ...options,
    headers
  };

  console.log(`üåê [API] ${options.method || 'GET'} –∑–∞–ø—Ä–æ—Å:`, endpoint);
  console.log('üìç URL:', url);
  console.log('üìã Headers:', headers);
  if (config.body) {
    console.log('üì¶ Body:', config.body);
  }
  
  try {
    const response = await fetch(url, config);
    
    console.log('üì° [API] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:');
    console.log('üî¢ Status:', response.status, response.statusText);
    console.log('üìã Response Headers:', Object.fromEntries(response.headers.entries()));
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå [API] –û—à–∏–±–∫–∞ HTTP:');
      console.error('‚ùå [API] Status:', response.status);
      console.error('‚ùå [API] Status Text:', response.statusText);
      console.error('‚ùå [API] Response Body:', errorText);
      console.error('‚ùå [API] Request URL:', url);
      console.error('‚ùå [API] Request Method:', options.method || 'GET');
      console.error('‚ùå [API] Request Headers:', headers);
      
      // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
      const detailedError = new Error(`HTTP ${response.status}: ${response.statusText} - ${errorText}`);
      detailedError.status = response.status;
      detailedError.statusText = response.statusText;
      detailedError.responseBody = errorText;
      detailedError.url = url;
      detailedError.method = options.method || 'GET';
      throw detailedError;
    }
    
    const responseData = await response.json();
    console.log('‚úÖ [API] –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:', responseData);
    return responseData;
  } catch (error) {
    console.error('üí• [API] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:');
    console.error('üí• [API] URL:', url);
    console.error('üí• [API] Method:', options.method || 'GET');
    console.error('üí• [API] Headers:', headers);
    console.error('üí• [API] Error Type:', error.constructor.name);
    console.error('üí• [API] Error Message:', error.message);
    console.error('üí• [API] Error Stack:', error.stack);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS –æ—à–∏–±–æ–∫
    if (error.message.includes('CORS') || error.message.includes('Access-Control-Allow-Origin')) {
      const corsError = new Error('CORS Error: –°–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Å —ç—Ç–æ–≥–æ –¥–æ–º–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å CORS –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏.');
      corsError.isCorsError = true;
      corsError.originalError = error;
      throw corsError;
    }
    
    if (error.message.includes('NetworkError') || error.message.includes('Failed to fetch')) {
      const networkError = new Error('Network Error: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞.');
      networkError.isNetworkError = true;
      networkError.originalError = error;
      throw networkError;
    }
    
    if (error.message.includes('TypeError')) {
      const typeError = new Error(`Type Error: ${error.message}. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö.`);
      typeError.isTypeError = true;
      typeError.originalError = error;
      throw typeError;
    }
    
    throw error;
  }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ OpenAPI —Å—Ö–µ–º—É
 * @param {string} baseUrl - –ë–∞–∑–æ–≤—ã–π URL API
 * @param {string} authToken - –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @returns {Promise<Object>} - Promise —Å –æ–±—ä–µ–∫—Ç–æ–º —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –º–∞—Å—Å–∏–≤ categories
 */
export const fetchCategories = async (baseUrl, authToken) => {
  return apiRequest('/b2b/v1/front-categories/get', baseUrl, authToken, {
    method: 'POST',
    body: JSON.stringify({}) // –ü—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç —Å–æ–≥–ª–∞—Å–Ω–æ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
  });
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 * @param {string} baseUrl - –ë–∞–∑–æ–≤—ã–π URL API
 * @param {string} authToken - –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @param {number} categoryId - ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Promise<Array>} - Promise —Å –º–∞—Å—Å–∏–≤–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 */
export const fetchProducts = async (baseUrl, authToken, categoryId = null) => {
  const endpoint = categoryId ? `/products?categoryId=${categoryId}` : '/products';
  return apiRequest(endpoint, baseUrl, authToken);
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
 * @param {string} baseUrl - –ë–∞–∑–æ–≤—ã–π URL API
 * @param {string} authToken - –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @param {Object} orderData - –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
 * @returns {Promise<Object>} - Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
 */
export const createOrder = async (baseUrl, authToken, orderData) => {
  return apiRequest('/orders', baseUrl, authToken, {
    method: 'POST',
    body: JSON.stringify(orderData)
  });
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
 * @param {string} baseUrl - –ë–∞–∑–æ–≤—ã–π URL API
 * @param {string} authToken - –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @param {string} orderId - ID –∑–∞–∫–∞–∑–∞
 * @returns {Promise<Object>} - Promise —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
 */
export const fetchOrderStatus = async (baseUrl, authToken, orderId) => {
  return apiRequest(`/orders/${orderId}`, baseUrl, authToken);
};

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
 * @param {string} baseUrl - –ë–∞–∑–æ–≤—ã–π URL API
 * @param {string} authToken - –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @param {string} orderId - ID –∑–∞–∫–∞–∑–∞
 * @param {string} status - –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
 * @returns {Promise<Object>} - Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
export const updateOrderStatus = async (baseUrl, authToken, orderId, status) => {
  return apiRequest(`/orders/${orderId}/status`, baseUrl, authToken, {
    method: 'PUT',
    body: JSON.stringify({ status })
  });
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤
 * @param {string} baseUrl - –ë–∞–∑–æ–≤—ã–π URL API
 * @param {string} authToken - –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @returns {Promise<Object>} - Promise —Å –æ–±—ä–µ–∫—Ç–æ–º —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –º–∞—Å—Å–∏–≤ stores
 */
export const fetchStores = async (baseUrl, authToken) => {
  return apiRequest('/b2b/v1/stores/get', baseUrl, authToken, {
    method: 'POST',
    body: JSON.stringify({}) // –ü—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç —Å–æ–≥–ª–∞—Å–Ω–æ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
  });
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≥—Ä–∏–¥ (—Å–µ—Ç–∫—É –≥—Ä—É–ø–ø –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π) —á–µ—Ä–µ–∑ OpenAPI —Å—Ö–µ–º—É
 * @param {string} baseUrl - –ë–∞–∑–æ–≤—ã–π URL API
 * @param {string} authToken - –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @param {string} locale - –õ–æ–∫–∞–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'en', 'ru')
 * @returns {Promise<Object>} - Promise —Å –æ–±—ä–µ–∫—Ç–æ–º —Å–æ–¥–µ—Ä–∂–∞—â–∏–º id –∏ groups
 */
export const fetchGrids = async (baseUrl, authToken, locale = 'en') => {
  return apiRequest('/b2b/v1/front/grids/get', baseUrl, authToken, {
    method: 'POST',
    body: JSON.stringify({ locale }) // –õ–æ–∫–∞–ª—å —Å–æ–≥–ª–∞—Å–Ω–æ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
  });
};
