// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ fetch –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
const originalFetch = window.fetch;
window.fetch = function(...args) {
  const [url, options = {}] = args;
  const method = options.method || 'GET';
  
  console.log(`üîç [FETCH INTERCEPTOR] ${method} –∑–∞–ø—Ä–æ—Å –∫:`, url);
  console.log('üîç [FETCH INTERCEPTOR] –û–ø—Ü–∏–∏:', options);
  
  if (method === 'OPTIONS') {
    console.warn('üö® [FETCH INTERCEPTOR] –û–±–Ω–∞—Ä—É–∂–µ–Ω OPTIONS –∑–∞–ø—Ä–æ—Å!');
    console.warn('üö® [FETCH INTERCEPTOR] URL:', url);
    console.warn('üö® [FETCH INTERCEPTOR] –≠—Ç–æ CORS preflight –∑–∞–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
  }
  
  return originalFetch.apply(this, args);
};

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ API —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
 * @param {string} endpoint - Endpoint API (–Ω–∞–ø—Ä–∏–º–µ—Ä, '/categories' –∏–ª–∏ '/products')
 * @param {string} baseUrl - –ë–∞–∑–æ–≤—ã–π URL API
 * @param {string} authToken - –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è fetch
 * @returns {Promise} - Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞
 */
export const apiRequest = async (endpoint, baseUrl, authToken, options = {}) => {
  const url = `${baseUrl.replace(/\/$/, '')}${endpoint.startsWith('/') ? endpoint : `/${endpoint}`}`;
  
  const headers = {
    'Content-Type': 'application/json',
    ...options.headers
  };

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
  if (authToken && authToken.trim()) {
    headers['Authorization'] = `Bearer ${authToken.trim()}`;
  }

  const config = {
    ...options,
    headers
  };

  const method = options.method || 'POST';
  console.log(`üåê [API] ${method} –∑–∞–ø—Ä–æ—Å:`, endpoint);
  console.log('üìç URL:', url);
  console.log('üìã Headers:', headers);
  if (config.body) {
    console.log('üì¶ Body:', config.body);
  }
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤
  if (method === 'OPTIONS') {
    console.warn('‚ö†Ô∏è [API] –û–±–Ω–∞—Ä—É–∂–µ–Ω OPTIONS –∑–∞–ø—Ä–æ—Å! –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å CORS preflight –∑–∞–ø—Ä–æ—Å.');
    console.warn('‚ö†Ô∏è [API] –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç CORS preflight –∑–∞–ø—Ä–æ—Å—ã.');
  }
  
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    const controller = new AbortController();
    const timeoutId = setTimeout(() => {
      console.warn('‚è∞ [API] –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞:', url);
      controller.abort();
    }, 30000); // 30 —Å–µ–∫—É–Ω–¥ timeout

    const response = await fetch(url, {
      ...config,
      signal: controller.signal
    });
    
    clearTimeout(timeoutId);
    
    console.log('üì° [API] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:');
    console.log('üî¢ Status:', response.status, response.statusText);
    console.log('üìã Response Headers:', Object.fromEntries(response.headers.entries()));
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è CORS
    if (response.status === 0 || (response.status === 200 || response.status === 204) && method === 'OPTIONS') {
      console.log('‚ÑπÔ∏è [API] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ OPTIONS –∑–∞–ø—Ä–æ—Å (CORS preflight)');
    }
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå [API] –û—à–∏–±–∫–∞ HTTP:');
      console.error('‚ùå [API] Status:', response.status);
      console.error('‚ùå [API] Status Text:', response.statusText);
      console.error('‚ùå [API] Response Body:', errorText);
      console.error('‚ùå [API] Request URL:', url);
      console.error('‚ùå [API] Request Method:', options.method || 'POST');
      console.error('‚ùå [API] Request Headers:', headers);
      
      // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
      const detailedError = new Error(`HTTP ${response.status}: ${response.statusText} - ${errorText}`);
      detailedError.status = response.status;
      detailedError.statusText = response.statusText;
      detailedError.responseBody = errorText;
      detailedError.url = url;
      detailedError.method = options.method || 'POST';
      throw detailedError;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (204 No Content)
    if (response.status === 204) {
      console.log('‚úÖ [API] –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç (204 No Content)');
      return {}; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –¥–ª—è 204 –æ—Ç–≤–µ—Ç–æ–≤
    }
    
    const responseData = await response.json();
    console.log('‚úÖ [API] –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:', responseData);
    return responseData;
  } catch (error) {
    console.error('üí• [API] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:');
    console.error('üí• [API] URL:', url);
    console.error('üí• [API] Method:', options.method || 'POST');
    console.error('üí• [API] Headers:', headers);
    console.error('üí• [API] Error Type:', error.constructor.name);
    console.error('üí• [API] Error Message:', error.message);
    console.error('üí• [API] Error Stack:', error.stack);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ timeout –æ—à–∏–±–æ–∫
    if (error.name === 'AbortError') {
      const timeoutError = new Error('Request Timeout: –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (30 —Å–µ–∫—É–Ω–¥). –°–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç.');
      timeoutError.isTimeoutError = true;
      timeoutError.originalError = error;
      throw timeoutError;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS –æ—à–∏–±–æ–∫
    if (error.message.includes('CORS') || error.message.includes('Access-Control-Allow-Origin')) {
      const corsError = new Error('CORS Error: –°–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Å —ç—Ç–æ–≥–æ –¥–æ–º–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å CORS –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏.');
      corsError.isCorsError = true;
      corsError.originalError = error;
      throw corsError;
    }
    
    if (error.message.includes('NetworkError') || error.message.includes('Failed to fetch')) {
      const networkError = new Error('Network Error: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞.');
      networkError.isNetworkError = true;
      networkError.originalError = error;
      throw networkError;
    }
    
    if (error.message.includes('TypeError')) {
      const typeError = new Error(`Type Error: ${error.message}. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö.`);
      typeError.isTypeError = true;
      typeError.originalError = error;
      throw typeError;
    }
    
    throw error;
  }
};



/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
 * @param {string} baseUrl - –ë–∞–∑–æ–≤—ã–π URL API
 * @param {string} authToken - –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @param {Object} orderData - –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
 * @returns {Promise<Object>} - Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
 */
export const createOrder = async (baseUrl, authToken, orderData) => {
  return apiRequest('/orders', baseUrl, authToken, {
    method: 'POST',
    body: JSON.stringify(orderData)
  });
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
 * @param {string} baseUrl - –ë–∞–∑–æ–≤—ã–π URL API
 * @param {string} authToken - –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @param {string} orderId - ID –∑–∞–∫–∞–∑–∞
 * @returns {Promise<Object>} - Promise —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
 */
export const fetchOrderStatus = async (baseUrl, authToken, orderId) => {
  return apiRequest('/orders/status', baseUrl, authToken, {
    method: 'POST',
    body: JSON.stringify({ order_id: orderId })
  });
};

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
 * @param {string} baseUrl - –ë–∞–∑–æ–≤—ã–π URL API
 * @param {string} authToken - –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @param {string} orderId - ID –∑–∞–∫–∞–∑–∞
 * @param {string} status - –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
 * @returns {Promise<Object>} - Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
export const updateOrderStatus = async (baseUrl, authToken, orderId, status) => {
  return apiRequest('/orders/update-status', baseUrl, authToken, {
    method: 'POST',
    body: JSON.stringify({ order_id: orderId, status })
  });
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤
 * @param {string} baseUrl - –ë–∞–∑–æ–≤—ã–π URL API
 * @param {string} authToken - –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @returns {Promise<Object>} - Promise —Å –æ–±—ä–µ–∫—Ç–æ–º —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –º–∞—Å—Å–∏–≤ stores
 */
export const fetchStores = async (baseUrl, authToken) => {
  console.log('üè™ [fetchStores] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤');
  console.log('üè™ [fetchStores] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { baseUrl, authToken: authToken ? '***' : '–Ω–µ —É–∫–∞–∑–∞–Ω' });
  console.log('‚è∞ [fetchStores] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω timeout: 30 —Å–µ–∫—É–Ω–¥');
  
  try {
    const result = await apiRequest('/b2b/v1/stores/get', baseUrl, authToken, {
      method: 'POST'
    });
    
    console.log('‚úÖ [fetchStores] –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
    return result;
  } catch (error) {
    console.error('‚ùå [fetchStores] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–∫–ª–∞–¥–æ–≤:', error);
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è timeout –æ—à–∏–±–æ–∫
    if (error.isTimeoutError) {
      console.error('‚è∞ [fetchStores] –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è');
      throw new Error('–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –°–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç.');
    }
    
    throw error;
  }
};


/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤–∏–¥–∂–µ—Ç–∞–º–∏ —á–µ—Ä–µ–∑ OpenAPI —Å—Ö–µ–º—É
 * @param {string} baseUrl - –ë–∞–∑–æ–≤—ã–π URL API
 * @param {string} authToken - –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @param {string} locale - –õ–æ–∫–∞–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'en', 'ru')
 * @returns {Promise<Object>} - Promise —Å –æ–±—ä–µ–∫—Ç–æ–º —Å–æ–¥–µ—Ä–∂–∞—â–∏–º id –∏ widgets
 */
export const fetchMains = async (baseUrl, authToken, locale = 'en') => {
  return apiRequest('/b2b/v1/front/mains/get', baseUrl, authToken, {
    method: 'POST',
    body: JSON.stringify({ locale }) // –õ–æ–∫–∞–ª—å —Å–æ–≥–ª–∞—Å–Ω–æ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
  });
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ OpenAPI —Å—Ö–µ–º—É
 * @param {string} baseUrl - –ë–∞–∑–æ–≤—ã–π URL API
 * @param {string} authToken - –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @param {string} locale - –õ–æ–∫–∞–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'en', 'ru')
 * @param {string} categoryId - ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä)
 * @param {number|null} pageToken - –¢–æ–∫–µ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã (null –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
 * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–º–∞–∫—Å–∏–º—É–º 100)
 * @returns {Promise<Object>} - Promise —Å –æ–±—ä–µ–∫—Ç–æ–º —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –º–∞—Å—Å–∏–≤ products –∏ next_page_token
 */
export const fetchProductsList = async (baseUrl, authToken, locale = 'en', categoryId, pageToken = null, limit = 10, storeId = null) => {
  console.log('üì¶ [fetchProductsList] –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoryId);
  console.log('üì¶ [fetchProductsList] Page token:', pageToken || 'null (first page)', 'Limit:', limit, 'Store ID:', storeId);
  
  const requestBody = { 
    locale,
    category_id: categoryId,
    limit: limit
  };
  
  // –î–æ–±–∞–≤–ª—è–µ–º store_id –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
  if (storeId) {
    requestBody.store_id = storeId;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º page_token —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ null (–Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
  // –°–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ API, page_token –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å integer
  if (pageToken !== null) {
    console.log('üîÑ [fetchProductsList] page_token before sending:', {
      value: pageToken,
      type: typeof pageToken
    });
    requestBody.page_token = pageToken;
  }

  console.log('üì¶ [fetchProductsList] Request body:', requestBody);

  return apiRequest('/b2b/v1/front/products/list', baseUrl, authToken, {
    method: 'POST',
    body: JSON.stringify(requestBody)
  });
};
