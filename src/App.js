import React, { useState, useEffect, useCallback } from 'react';
import ProductGrid from './components/ProductGrid';
import BottomPanel from './components/BottomPanel';
import StoreSelector from './components/StoreSelector';
import { categories, products } from './data/mockData';
import { useApi } from './hooks/useApi';
import './App.css';

function App() {
  const [cart, setCart] = useState([]);
  const [orderStatus, setOrderStatus] = useState('–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤');
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [apiUrl, setApiUrl] = useState('http://localhost:3001');
  const [authToken, setAuthToken] = useState('');
  const [useRealApi, setUseRealApi] = useState(false);
  const [apiCategories, setApiCategories] = useState([]);
  const [apiProducts, setApiProducts] = useState([]);
  const [selectedStore, setSelectedStore] = useState(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API —Ö—É–∫
  const api = useApi(apiUrl, authToken);

  const addToCart = (product) => {
    setCart(prevCart => {
      const existingItem = prevCart.find(item => item.id === product.id);
      if (existingItem) {
        return prevCart.map(item =>
          item.id === product.id
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      }
      return [...prevCart, { ...product, quantity: 1 }];
    });
  };

  const removeFromCart = (productId) => {
    setCart(prevCart => prevCart.filter(item => item.id !== productId));
  };

  const updateQuantity = (productId, quantity) => {
    if (quantity <= 0) {
      removeFromCart(productId);
      return;
    }
    setCart(prevCart =>
      prevCart.map(item =>
        item.id === productId ? { ...item, quantity } : item
      )
    );
  };

  const getTotalItems = () => {
    return cart.reduce((total, item) => total + item.quantity, 0);
  };

  const getTotalPrice = () => {
    return cart.reduce((total, item) => total + (item.price * item.quantity), 0);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ API
  const loadCategories = useCallback(async () => {
    if (!useRealApi || apiCategories.length > 0) return;

    try {
      console.log('üìÇ [App] –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
      const response = await api.getCategories();
      
      // –°–æ–≥–ª–∞—Å–Ω–æ OpenAPI —Å—Ö–µ–º–µ, –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º categories
      if (response && response.categories && Array.isArray(response.categories)) {
        console.log('üìä [App] –ü–æ–ª—É—á–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—Ç API:', response.categories.length);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ API –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–Ω—è—Ç–Ω—ã–π –Ω–∞—à–µ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
        const allCategories = response.categories.map(category => ({
          id: category.id,
          name: category.name?.ru || category.name?.en || `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${category.id}`,
          description: category.description?.ru || category.description?.en || '',
          image: category.images && category.images.length > 0 ? category.images[0] : '/images/categories/default.svg',
          parentId: category.parent_id || null,
          order: category.order || 0,
          status: category.status || 'active'
        }));
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const activeCategories = allCategories.filter(category => category.status === 'active');
        
        console.log('üìä [App] –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', activeCategories.length);
        console.log('üìä [App] –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', allCategories.length - activeCategories.length);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const inactiveCategories = allCategories.filter(category => category.status !== 'active');
        if (inactiveCategories.length > 0) {
          console.log('üö´ [App] –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', inactiveCategories.map(c => `${c.name} (${c.status})`));
        }
        
        setApiCategories(activeCategories);
        console.log('‚úÖ [App] –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:', activeCategories.length);
      } else {
        console.warn('‚ö†Ô∏è [App] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API:', response);
        setApiCategories([]);
      }
    } catch (error) {
      console.error('‚ùå [App] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    }
  }, [useRealApi, api, apiCategories.length]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ API
  const loadProducts = useCallback(async (categoryId = null) => {
    if (!useRealApi) return;

    try {
      console.log('üì¶ [App] –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoryId || '–≤—Å–µ');
      const productsData = await api.getProducts(categoryId);
      
      if (categoryId) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        setApiProducts(prevProducts => {
          // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
          const filteredProducts = prevProducts.filter(p => p.categoryId !== categoryId);
          return [...filteredProducts, ...productsData];
        });
      } else {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        setApiProducts(productsData);
      }
      console.log('‚úÖ [App] –ü—Ä–æ–¥—É–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', productsData.length);
    } catch (error) {
      console.error('‚ùå [App] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
    }
  }, [useRealApi, api]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
  const handleCheckout = async () => {
    if (cart.length === 0) return;
    
    const orderData = {
      items: cart.map(item => ({
        productId: item.id,
        quantity: item.quantity,
        price: item.price
      })),
      totalAmount: getTotalPrice(),
      timestamp: new Date().toISOString(),
      store: selectedStore ? {
        id: selectedStore.id,
        name: selectedStore.name,
        address: selectedStore.address
      } : null
    };

    try {
      if (useRealApi) {
        const result = await api.submitOrder(orderData);
        setOrderStatus('–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω');
        setCart([]);
        console.log('Order created:', result);
      } else {
        // –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        setOrderStatus('–ì–æ—Ç–æ–≤–∏—Ç—Å—è');
        setCart([]);
        console.log('Mock order created:', orderData);
      }
    } catch (error) {
      console.error('Failed to create order:', error);
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API
  useEffect(() => {
    if (useRealApi && apiUrl && selectedStore) {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–∫–ª–∞–¥–∞
      loadCategories();
    }
  }, [useRealApi, apiUrl, selectedStore, loadCategories]);

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–∏–∑ API –∏–ª–∏ –º–æ–∫–æ–≤—ã–µ)
  const currentCategories = useRealApi ? apiCategories : categories;
  const currentProducts = useRealApi ? apiProducts : products;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
  const handleStoreSelect = useCallback((store) => {
    setSelectedStore(store);
  }, []);

  return (
    <div className="app">
      <header className="app-header">
        <h1>üçï Delivery PWA</h1>
        <p>–ó–∞–∫–∞–∑ –µ–¥—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π</p>
      </header>
      
      <main className="app-main">
        <StoreSelector 
          selectedStore={selectedStore}
          onStoreSelect={handleStoreSelect}
          apiUrl={apiUrl}
          authToken={authToken}
          useRealApi={useRealApi}
        />
        
        <ProductGrid 
          categories={currentCategories}
          products={currentProducts}
          onAddToCart={addToCart}
          loading={api.loading}
          error={api.error}
          selectedStore={selectedStore}
          useRealApi={useRealApi}
          onLoadProducts={loadProducts}
        />
      </main>
      
      <BottomPanel 
        cart={cart}
        orderStatus={orderStatus}
        isLoggedIn={isLoggedIn}
        onLogin={() => setIsLoggedIn(!isLoggedIn)}
        onUpdateQuantity={updateQuantity}
        onRemoveFromCart={removeFromCart}
        totalItems={getTotalItems()}
        totalPrice={getTotalPrice()}
        apiUrl={apiUrl}
        onApiUrlChange={setApiUrl}
        authToken={authToken}
        onAuthTokenChange={setAuthToken}
        onCheckout={handleCheckout}
        useRealApi={useRealApi}
        onToggleApi={setUseRealApi}
      />
    </div>
  );
}

export default App;
