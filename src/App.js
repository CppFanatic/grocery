import React, { useState, useEffect, useCallback } from 'react';
import MainView from './components/MainView';
import BottomPanel from './components/BottomPanel';
import StoreSelector from './components/StoreSelector';
import { useApi } from './hooks/useApi';
import './App.css';

function App() {
  const [cart, setCart] = useState([]);
  const [orderStatus, setOrderStatus] = useState('–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤');
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [apiUrl, setApiUrl] = useState('http://localhost:3001');
  const [authToken, setAuthToken] = useState('');
  const [selectedStore, setSelectedStore] = useState(null);
  const [mainsData, setMainsData] = useState(null);
  const [locale, setLocale] = useState('en');
  const [retryCount, setRetryCount] = useState(0);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API —Ö—É–∫
  const api = useApi(apiUrl, authToken);

  const addToCart = (product) => {
    setCart(prevCart => {
      const existingItem = prevCart.find(item => item.id === product.id);
      if (existingItem) {
        return prevCart.map(item =>
          item.id === product.id
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      }
      return [...prevCart, { ...product, quantity: 1 }];
    });
  };

  const removeFromCart = (productId) => {
    setCart(prevCart => prevCart.filter(item => item.id !== productId));
  };

  const updateQuantity = (productId, quantity) => {
    if (quantity <= 0) {
      removeFromCart(productId);
      return;
    }
    setCart(prevCart =>
      prevCart.map(item =>
        item.id === productId ? { ...item, quantity } : item
      )
    );
  };

  const getTotalItems = () => {
    return cart.reduce((total, item) => total + item.quantity, 0);
  };

  const getTotalPrice = () => {
    return cart.reduce((total, item) => total + (item.price * item.quantity), 0);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ API
  const loadMains = useCallback(async () => {
    if (mainsData) return;

    try {
      console.log('üè† [App] –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
      console.log('üîç [App] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', { locale, apiUrl, retryCount });
      
      const response = await api.getMains(locale);
      
      // –°–æ–≥–ª–∞—Å–Ω–æ OpenAPI —Å—Ö–µ–º–µ, –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ id –∏ widgets
      if (response && response.widgets && Array.isArray(response.widgets)) {
        console.log('üìä [App] –ü–æ–ª—É—á–µ–Ω–∞ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:', response.id);
        console.log('üìä [App] –í–∏–¥–∂–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', response.widgets.length);
        console.log('üìä [App] –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:', JSON.stringify(response, null, 2));
        
        setMainsData(response);
        setRetryCount(0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        console.log('‚úÖ [App] –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      } else {
        console.warn('‚ö†Ô∏è [App] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API:', response);
        console.warn('‚ö†Ô∏è [App] –û–∂–∏–¥–∞–ª—Å—è –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º widgets (–º–∞—Å—Å–∏–≤)');
        setMainsData(null);
      }
    } catch (error) {
      console.error('‚ùå [App] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:');
      console.error('‚ùå [App] –¢–∏–ø –æ—à–∏–±–∫–∏:', error.constructor.name);
      console.error('‚ùå [App] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', error.message);
      console.error('‚ùå [App] –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
      console.error('‚ùå [App] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', { locale, apiUrl, retryCount });
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
      if (error.message.includes('404')) {
        console.log('‚ÑπÔ∏è [App] –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404)');
      } else if (error.message.includes('CORS')) {
        console.error('üö´ [App] CORS –æ—à–∏–±–∫–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞');
      } else if (error.message.includes('Network')) {
        console.error('üåê [App] –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É');
      } else if (error.message.includes('401') || error.message.includes('403')) {
        console.error('üîê [App] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω');
      } else if (error.message.includes('500')) {
        console.error('üî• [App] –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
      }
      
      setMainsData(null);
    }
  }, [api, locale, apiUrl, mainsData, retryCount]);


  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ API —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  const loadProducts = useCallback(async (categoryId, pageToken = '', limit = 10) => {
    try {
      console.log('üì¶ [App] –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoryId, 'page token:', pageToken || 'empty (first page)', 'limit:', limit);
      const response = await api.getProductsList(locale, categoryId, pageToken, limit);
      
      // –°–æ–≥–ª–∞—Å–Ω–æ OpenAPI —Å—Ö–µ–º–µ, –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º products –∏ next_page_token
      if (response && response.products && Array.isArray(response.products)) {
        const productsData = response.products;
        const nextPageToken = response.next_page_token || null;
        console.log('‚úÖ [App] –ü—Ä–æ–¥—É–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', productsData.length, 'next_page_token:', nextPageToken);
        return { products: productsData, nextPageToken };
      } else {
        console.warn('‚ö†Ô∏è [App] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', response);
        return { products: [], nextPageToken: null };
      }
    } catch (error) {
      console.error('‚ùå [App] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
      return { products: [], nextPageToken: null };
    }
  }, [api, locale]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
  const handleCheckout = async () => {
    if (cart.length === 0) return;
    
    const orderData = {
      items: cart.map(item => ({
        productId: item.id,
        quantity: item.quantity,
        price: item.price
      })),
      totalAmount: getTotalPrice(),
      timestamp: new Date().toISOString(),
      store: selectedStore ? {
        id: selectedStore.id,
        name: selectedStore.name,
        address: selectedStore.address
      } : null
    };

    try {
      const result = await api.submitOrder(orderData);
      setOrderStatus('–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω');
      setCart([]);
      console.log('Order created:', result);
    } catch (error) {
      console.error('Failed to create order:', error);
      setOrderStatus('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API
  useEffect(() => {
    if (apiUrl && selectedStore) {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–∫–ª–∞–¥–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞)
      if (!mainsData) {
        console.log('üîÑ [App] useEffect: –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
        loadMains();
      }
    }
  }, [apiUrl, selectedStore, loadMains, mainsData]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
  const handleRetry = useCallback(() => {
    console.log('üîÑ [App] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –∑–∞–≥—Ä—É–∑–∫–∏');
    setMainsData(null);
    setRetryCount(prev => prev + 1);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
  const handleStoreSelect = useCallback((store) => {
    console.log('üè™ [App] –í—ã–±—Ä–∞–Ω —Å–∫–ª–∞–¥:', store);
    setSelectedStore(store);
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–∫–ª–∞–¥–∞
    setMainsData(null);
    setRetryCount(0);
  }, []);

  return (
    <div className="app">
      <header className="app-header">
        <h1>üçï Delicious API</h1>
      </header>
      
      <main className="app-main">
        <StoreSelector 
          selectedStore={selectedStore}
          onStoreSelect={handleStoreSelect}
          apiUrl={apiUrl}
          authToken={authToken}
          useRealApi={true}
        />
        
        {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º MainView –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –≤–∏–¥–∂–µ—Ç–∞–º–∏ */}
        <MainView 
          mainsData={mainsData}
          onAddToCart={addToCart}
          onCategoryClick={(category) => {
            console.log('üìÇ [App] –ö–ª–∏–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', category);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          }}
          onLoadProducts={loadProducts}
          loading={api.loading}
          error={api.error}
          selectedStore={selectedStore}
          useRealApi={true}
          onRetry={handleRetry}
          retryCount={retryCount}
        />
      </main>
      
      <BottomPanel 
        cart={cart}
        orderStatus={orderStatus}
        isLoggedIn={isLoggedIn}
        onLogin={() => setIsLoggedIn(!isLoggedIn)}
        onUpdateQuantity={updateQuantity}
        onRemoveFromCart={removeFromCart}
        totalItems={getTotalItems()}
        totalPrice={getTotalPrice()}
        apiUrl={apiUrl}
        onApiUrlChange={setApiUrl}
        authToken={authToken}
        onAuthTokenChange={setAuthToken}
        onCheckout={handleCheckout}
        locale={locale}
        onLocaleChange={setLocale}
      />
    </div>
  );
}

export default App;
